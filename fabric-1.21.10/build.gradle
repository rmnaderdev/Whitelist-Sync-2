plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
}

//project.archivesBaseName = "${project.archivesBaseName}-fabric-${minecraft_version}"
version = project.mod_version
group = project.mod_group_id

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

ext.buildNumber = System.getenv().BUILD_NUMBER ?: "Dev"
//def changeLogProvider = rootProject.providers.fileContents(
//    rootProject.layout.projectDirectory.file("CHANGELOG.md")
//).asText
//
//modrinth {
//    token = System.getenv("MODRINTH_TOKEN")          // set in CI secrets
//    projectId = 'DcCsQ8S5'                    // e.g. 'abcd1234'
//    versionNumber = "${project.version}-fabric-${minecraft_version}"
//    versionName = "Whitelist Sync ${project.version} (Fabric ${minecraft_version})"
//    versionType = 'release'                          // or 'beta'/'alpha'
//    uploadFile = tasks.remapJar                      // publish the remapped jar
//    gameVersions = [ minecraft_version ]             // from gradle.properties
//    loaders = [ 'fabric' ]
//    changelog = changeLogProvider.present ? changeLogProvider.get() : "No changelog."
//    dependencies = []
//}
//
//tasks.modrinth.dependsOn tasks.remapJar

// Optional: only publish on tags
//tasks.modrinth.onlyIf {
//    System.getenv("GITHUB_REF")?.startsWith("refs/tags/")
//}

loom {
//    splitEnvironmentSourceSets()

    mods {
        "whitelistsync2" {
            sourceSet sourceSets.main
        }
    }

}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Core library dependency
    shade project(path: ':WhitelistSyncCore', configuration: 'shadow')

    // Used for development. These are added by the user later.
    // Need "minecraftLibrary" so the libraries are used in the dev environment. Without them, the JDBC drivers won't be loaded.
    modImplementation "curse.maven:mysqlconnector-561280:4684944"
    modImplementation "curse.maven:sqliteconnector-560832:3582173"
}

processResources {
    filesMatching(['fabric.mod.json']) {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

shadowJar {
    archiveClassifier = "dev-shadow"
    configurations = [project.configurations.shade]
}

// Remap must use shadowJar as input
remapJar {
    dependsOn shadowJar
    inputFile.set shadowJar.archiveFile
    archiveBaseName = "WhitelistSync"
    archiveClassifier = "fabric-${minecraft_version}"
    destinationDirectory = file '../target'
}

artifacts {
    archives shadowJar
    shadow shadowJar
}