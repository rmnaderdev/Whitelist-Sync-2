plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev'
    id 'com.modrinth.minotaur'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

ext.buildNumber = System.getenv().BUILD_NUMBER ?: "Dev"

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

//project.archivesBaseName = "${project.archivesBaseName}-forge-${minecraft_version}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    // Core library dependency
    shade project(path: ':WhitelistSyncCore', configuration: 'shadow')
    runtimeOnly project(path: ':WhitelistSyncCore', configuration: 'shadow')

    // Used for development. These are added by the user later.
    runtimeOnly "curse.maven:mysqlconnector-561280:4684944"
    runtimeOnly "curse.maven:sqliteconnector-560832:3582173"
}

processResources {
    filesMatching(['pack.mcmeta', 'neoforge.mods.toml', 'META-INF/neoforge.mods.toml', 'mixins.json', '*.mixins.json']) {
        expand project.properties
    }
}

jar {
    archiveClassifier.set('slim')
    manifest {
        attributes([
                "Specification-Title"     : "${project.name}",
                "Specification-Vendor"    : "rmnaderdev",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "rmnaderdev",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    shadowJar {}
}

shadowJar {
    archiveBaseName = "WhitelistSync"
    archiveClassifier = "neoforge-${minecraft_version}"
    destinationDirectory = file '../target'
    configurations = [project.configurations.shade]
}
assemble.dependsOn shadowJar

artifacts {
    archives shadowJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

def changeLogProvider = rootProject.providers.fileContents(
        rootProject.layout.projectDirectory.file("CHANGELOG.md")
).asText

modrinth {
    System.println("Modrinth token: ${System.getenv("MODRINTH_TOKEN") != null}")
    token = System.getenv("MODRINTH_TOKEN")
    projectId = 'DcCsQ8S5'
    versionNumber = "${minecraft_version}-${project.version}"
    versionName = "Whitelist Sync ${project.version} (NeoForge ${minecraft_version})"
    versionType = 'release'
    uploadFile = tasks.named('shadowJar').flatMap { it.archiveFile }
    gameVersions = [minecraft_version]
    loaders = ['neoforge']
    changelog = changeLogProvider.present ? changeLogProvider.get() : "No changelog."
    dependencies = []
}

tasks.named('modrinth') {
    dependsOn(tasks.named('shadowJar'))
    doFirst {
        def jarFile = tasks.named('shadowJar').get().archiveFile.get().asFile
        println "modrinth: resolved shadowJar -> ${jarFile} (exists? ${jarFile.exists()})"
        if (!jarFile.exists()) throw new GradleException("modrinth: shadowJar file not found: ${jarFile}")
    }
}

tasks.modrinth.onlyIf {
    System.getenv("GITHUB_REF")?.startsWith("refs/tags/")
}
