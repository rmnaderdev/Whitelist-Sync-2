plugins {
    id 'fabric-loom'
    id 'me.shedaniel.unified-publishing'
}

version = project.mod_version
group = project.mod_group_id

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

ext.buildNumber = System.getenv().BUILD_NUMBER ?: "Dev"

loom {
//    splitEnvironmentSourceSets()
    mods {
        "whitelistsync2" {
            sourceSet sourceSets.main
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    shade project(path: ':WhitelistSyncCore', configuration: 'shadow')
    modImplementation "curse.maven:mysqlconnector-561280:4684944"
    modImplementation "curse.maven:sqliteconnector-560832:3582173"
}

processResources {
    filesMatching(['fabric.mod.json']) {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
    from {
        configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {
    archiveClassifier = "dev-shadow"
    configurations = [project.configurations.shade]
}

remapJar {
    dependsOn shadowJar
    archiveBaseName = "WhitelistSync"
    archiveClassifier = "fabric-${minecraft_version}"
    destinationDirectory = file '../target'
}

artifacts {
    archives shadowJar
}

def changeLogProvider = rootProject.providers.fileContents(
        rootProject.layout.projectDirectory.file("CHANGELOG.md")
).asText

unifiedPublishing {
    project {
        changelog = changeLogProvider.present ? changeLogProvider.get() : "No changelog."
        releaseType = "release"
        gameVersions = [minecraft_version]
        gameLoaders = ["fabric"]

        mainPublication tasks.remapJar

        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
        }

        var cfToken = System.getenv("CF_TOKEN")
        System.println("Curseforge token: ${cfToken != null}")
        if (cfToken != null && System.getenv("GITHUB_REF")?.startsWith("refs/tags/")) {
            curseforge {
                token = cfToken
                id = "274793"
                displayName = "WhitelistSync-${project.version}-fabric-${minecraft_version}"
            }
        } else {
            System.out.println("Curseforge publication skipped.")
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        System.println("Modrinth token: ${mrToken != null}")
        if (mrToken != null && System.getenv("GITHUB_REF")?.startsWith("refs/tags/")) {
            modrinth {
                token = mrToken
                id = "DcCsQ8S5"
                displayName = "Whitelist Sync (Fabric ${minecraft_version})"
                version = "${minecraft_version}-${project.version}"
            }
        } else {
            System.out.println("Modrinth publication skipped.")
        }
    }
}
